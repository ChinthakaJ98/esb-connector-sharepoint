Product: Integration tests for WSO2 EI Sharepoint connector

Pre-requisites:

 - Maven 3.x
 - Java 1.8

Tested Platform: 

 - UBUNTU 16.04 LTS
 - WSO2 EI 6.4.0

Note:
    Set up a new SharePoint account and follow all the instruction given below in step 4 to generate an access token.

Steps to follow in setting integration test.

 1. Download EI pack from official website.
 
 2. Please make sure that the below mentioned Axis configurations are add and enabled (conf\axis2\axis2.xml).
    <messageFormatter contentType="application/json;odata=verbose"
                                    class="org.apache.synapse.commons.json.JsonFormatter"/>
    <messageBuilder contentType="application/json;odata=verbose"
                                    class="org.apache.synapse.commons.json.JsonBuilder"/>

    <messageFormatter contentType="application/octet-stream"
                                    class="org.apache.axis2.format.BinaryFormatter"/>
    <messageBuilder contentType="binary/octet-stream"
                                    class="org.wso2.carbon.relay.BinaryRelayBuilder"/>

    When you call createCustomListItem connector method with blocking mode and getAccessTokenFromRefreshToken, you need to add the following
    builders and formatter in axis2_blocking_client.xml

    <messageFormatter contentType="application/json;odata=verbose"
                                    class="org.apache.synapse.commons.json.JsonStreamFormatter"/>
    <messageBuilder contentType="application/json;odata=verbose"
                                    class="org.apache.synapse.commons.json.JsonStreamBuilder"/>

    <messageFormatter contentType="application/octet-stream"
                                    class="org.apache.axis2.format.BinaryFormatter"/>
    <messageBuilder contentType="binary/octet-stream"
                                    class="org.wso2.carbon.relay.BinaryRelayBuilder"/>

 3. Navigate to https://products.office.com/en-us/business/compare-office-365-for-business-plans to create an account for Office365 , and click SharePoint.
        Note: This is a 30-day free trial account.

 4. Follow the below mentioned steps to generate the access token:
        i)      Log in to your Office365 account, and go to the following URLs:
                   https://your_site_name.sharepoint.com/_layouts/15/appregnew.aspx
        ii)     Set the following options:
                    App Type—Select An app running on a web server.(You may not have this option)
                    Client Id—Click Generate, and copy the generated value to a text file.
                    Client Secret—Click Generate, and copy the generated value to a text file.
                    Title—Enter a name for the app.
                    App Domain—Enter the domain name.
                    Redirect URL— Enter the Callback URL.
        iii)    Click Create.
                    Now you’ll configure the newly created app to access SharePoint resources.
        iv)     Go to Site settings > Site app permissions.
                The realm ID is displayed under App Identifier to the right of the @ sign. It will display with the format
                i:0i.t|ms.sp.ext|<audience principal ID>@<site_realm>
                Get the Realm of your site.Realm is a constant GUID for a site. Save this realm for future use.
        v)      Get the Authorization code from Azure Access Control Service
                Construct the authorization url as follows:
                     https://your_site.sharepoint.com/_layouts/15/OAuthAuthorize.aspx?client_id=client_GUID&scope=app_permissions_list&response_type=code&redirect_uri=redirect_uri
                Set the scope=Web.Manage
        vi)     Once you grant the permission (by clicking trust), SharePoint Online site asks ACS to create an authorization code unique to this combination of user and app.
                ACS sends the authorization code to the SharePoint site.
                SharePoint Online site redirects the browser back to the redirect URI that was specified when the app was registered in step i) and ii).
                It also includes the authorization code as a query string. The redirect URL is structured like the following:
                    https://redirect_url/?code=<authcode>
                Extract query string value code from above url and it will be used in next step.
        Vii)    Get the access token and refresh token from code:
                    Construct the below post request:
                    https://accounts.accesscontrol.windows.net/<site_realm>/tokens/OAuth/2
                    Post parameters:
                    grant_type=authorization_code
                    &client_id=<client_id>@<site_realm>
                    &client_secret=<client_secret>
                    &code=<auth_code>
                    &redirect_uri=<redirect_url>
                    &resource=<audience principal ID>/<site_host>@<site_realm>
               The example for the site_host is nirthikacompany.sharepoint.com
        viii)   Get the access token from refresh token:
                    This step is almost similar to step   viii), except 2 differences. Here the difference is that we use:
                           *    grant_type as refresh_token and
                           *    refresh_token instead of code in step4 and use the refresh token which we have saved in step4.
                    https://accounts.accesscontrol.windows.net/<site_realm>/tokens/OAuth/2

 5. Compress modified EI as wso2ei-6.4.0.zip and copy that zip file in to location "{SHAREPOINT_CONNECTOR_HOME}/repository/".

 6. Update the Sharepoint properties file at location "{SHAREPOINT_CONNECTOR_HOME}/src/test/resources/artifacts/ESB/connector/config" and
    "{SHAREPOINT_CONNECTOR_HOME}/repository/esb-connector-sharepoint.properties" as below.

    i) 		apiUrl					                - Use the API URL as "https://your_site_name.sharepoint.com".
    ii)		accessToken				            - Access Token obtained by following the steps in 4.
    iii) 	intervalTime		            - Accesstoken expiration time interval.
    iv)		id          			            - Realm id, This is a constant GUID for a site.
    v)		registryPath	 		            - Registry Path of the Connector where the credentials are stored
    vi) 	allowContentTypes	 	       - Boolean value, that specifies whether the list supports content types.
    vii)	baseTemplate			            - Specifies list definition type on which the list is based.
    viii)	contentTypesEnabled		     - Boolean value, that specifies whether content types are enabled for the list.
    ix)		description				            - Description of the list.
    x)		title				                   - The title for the list.
    xi)		type				                   - Type when constructing the metadata variable(eg:SP.List,SP.Folder).
    xii)	listTitle			               - The title of the list to create list item.
    xiii)   ifMatch                 - To force an overwrite of the item regardless of version, set the ETag value.
    xiv)    itemId                  - The ID of the list item to return.
    xv)     guId                    - The GUID of the list to return list.
    xvi)    newTitle                - The new title of item to update.
    xvii)   serverRelativeUrl       - Document library relative url/folder name.
    xviii)  folderName              - Name of the folder path.
    xix)    overwrite               - Permition to access the file.
    xx)     fileName                - Name of the file to create(Eg: abc.txt).
    xxi)    fileContent             - Content of the file.
    xxii)   filePath                - Name of the file path that is to be updated.
    xxiii)  customListTitle         - Title of the custom list (Go to Add lists ---> Custom List in Datasheet View to create custom list) to create item list
    xxiv)   customListItemType      - Type when constructing the metadata variable(eg:SP.Data.custom002ListItem) (Note custom002 is the title of the custom title which is created in above step)
    xxv)    customListItems         - List of the items to be created.
    xxvi)   blocking                - The blocking parameter is helping connector performs the blocking invocations to Sharepoint.
 7. Navigate to "{SHAREPOINT_CONNECTOR_HOME}" and run the following command.
      $ mvn clean install -Dskip-tests=false
